Our group met via a Discord call to go over the project specifications and talked amongst eachother about the file we were expected to work on. 

Tu - I implemented the multiline and background control operators. The purpose of those operators, for the multiline, was to allow users to type in multiple commands/pipelines that would run sequentially. The background operator allows for called processes to run in the
background which let users immediately type in another command without waiting for the previous process.

Thomas- I implemented the shell history command. the purpose of the hist command is to be able to view and execute any of the 10 most recent shell commands. I stored the commands in a 2d string array with a trash index. When the number of commands exceeds 10, the least recent command gets written to the trash index, overwriting the command that was in the trash index before. When the user calls to execute a previous command, the 2d string array returns the desired command and then the command is ran as normal.

Jenylee - I implemented the input and output redirection of the project. The purpose was to use ">" which redirected stdout to a file, in other words it wrote the output of the command into a designated file and "<" redirected stdin from a file or in other words it read from a file. I first set rcmd to cmd casted to redircmd struct pointer. Afterwards, I closed rcmd's file descriptor to ensure there are no open files that can intervene with the redirection. After I closed that fd, I opened the rcmd's file with the mode which determined how the file is accessed. Lastly, after redirection I ran the designated command chosen by the user. 

Ahmed - I implemented the pipeline operator. The purpose of this operator was to allow the use of the "|" character to connect two or more commands together. The way I implemented the pipe operator was by creating seperate processes for each inputted command on either side of the pipe and passing data between each command by sharing file descriptor between the seperate processes.